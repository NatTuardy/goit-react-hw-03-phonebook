{"version":3,"sources":["comoonents/SingUpForm/SingUpForm.module.css","App.module.css","comoonents/Contact/ContactListItem/ContactItem.module.css","comoonents/Filter/Filter.module.css","comoonents/SingUpForm/SingUpForm.js","comoonents/Contact/ContactListItem/ContactItem.js","comoonents/Contact/ContactList.js","comoonents/Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SingUpForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","contacts","map","contact","includes","alert","reset","human","id","uuidv4","getContact","this","onSubmit","className","styles","label","ntmlfor","loginInputId","input","type","onChange","minLength","placeholder","button","Component","ContactItem","onDeleteContact","item","key","onClick","ContactList","Filter","onChangeFilter","length","tittle","inputt","App","filter","changeFilter","handleGetContact","prev","deleteContact","localStorageContacts","localStorage","getItem","JSON","parse","prevProps","prevState","setItem","stringify","filteredContacts","toLowerCase","filterContactsWithQuery","container","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e07a606.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SingUpForm_label__3qLDF\",\"input\":\"SingUpForm_input__3JvF5\",\"button\":\"SingUpForm_button__273aa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__ndIEp\",\"title\":\"App_title__3GrQ3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__17eLx\",\"button\":\"ContactItem_button__1FTzp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tittle\":\"Filter_tittle__2DXa4\",\"inputt\":\"Filter_inputt__1HyHZ\"};","import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './SingUpForm.module.css';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class SingUpForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = e.target;\r\n    const repeatName = this.props.contacts.map(contact => contact.name);\r\n    if (!repeatName.includes(e.target.name.value)) {\r\n      const human = { id: uuidv4(), name: name.value, number: number.value };\r\n      this.props.getContact(human);\r\n      this.reset();\r\n    } else {\r\n      alert(`${name.value} is already in contacts`);\r\n      this.reset();\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label className={styles.label} ntmlfor={this.loginInputId}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n            name=\"name\"\r\n            minLength=\"3\"\r\n            placeholder=\"Enter name\"\r\n          />\r\n        </label>\r\n        <br />\r\n        <label className={styles.label} ntmlfor={this.loginInputId}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n            name=\"number\"\r\n            minLength=\"5\"\r\n            placeholder=\"Enter telephon number\"\r\n          />\r\n        </label>\r\n\r\n        <button className={styles.button} type=\"submit\">\r\n          Add contact {name}\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nSingUpForm.propTypes = {\r\n  getContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactItem.module.css';\n\nconst ContactItem = ({ contact, onDeleteContact }) => {\n  return (\n    <>\n      <li className={styles.item} key={contact.id}>\n        {contact.name} : {contact.number}\n      </li>\n      <button className={styles.button} type=\"button\" onClick={onDeleteContact}>\n        Delete\n      </button>\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contact: PropTypes.object,\n};\n","import React from 'react';\nimport ContactItem from './ContactListItem/ContactItem';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(contact => (\n        <ContactItem\n          contact={contact}\n          key={contact.id}\n          onDeleteContact={() => onDeleteContact(contact.id)}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) =>\r\n  contacts.length >= 2 && (\r\n    <>\r\n      <h3 className={styles.tittle}>Find contact by name:</h3>,\r\n      <input\r\n        className={styles.inputt}\r\n        type=\"search\"\r\n        value={value}\r\n        onChange={onChangeFilter}\r\n        placeholder=\"Find name\"\r\n      />\r\n    </>\r\n  );\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  value: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\nimport SingUpForm from './comoonents/SingUpForm/SingUpForm';\nimport ContactList from './comoonents/Contact/ContactList';\nimport Filter from './comoonents/Filter/Filter';\nimport styles from './App.module.css';\n\nconst filterContactsWithQuery = (contacts, filter) => {\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\n  );\n};\n\nexport default class App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n\n    filter: '',\n  };\n\n  componentDidMount() {\n    const localStorageContacts = localStorage.getItem('contacts');\n    if (localStorageContacts) {\n      this.setState({ contacts: JSON.parse(localStorageContacts) });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  changeFilter = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  handleGetContact = contact => {\n    this.setState(prev => ({\n      contacts: [...prev.contacts, contact],\n    }));\n  };\n\n  deleteContact = id => {\n    this.setState(state => ({\n      contacts: state.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const filteredContacts = filterContactsWithQuery(contacts, filter);\n\n    return (\n      <div className={styles.container}>\n        <h2 className={styles.title}>Phonebook</h2>\n        <SingUpForm getContact={this.handleGetContact} contacts={contacts} />\n        <h2 className={styles.title}>Contacts</h2>\n        <Filter\n          contacts={contacts}\n          value={filter}\n          onChangeFilter={this.changeFilter}\n        />\n        <ContactList\n          contacts={filteredContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}